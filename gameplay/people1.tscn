[gd_scene load_steps=4 format=2]

[ext_resource path="res://assets/img/people1.png" type="Texture" id=1]

[sub_resource type="GDScript" id=1]
script/source = "extends KinematicBody2D


signal activity_ended


onready var velocity := Vector2.ZERO
onready var node_spent : Node = get_node(\"spent\")
onready var node_safe : Node = get_node(\"safe\")


var ec
var true_if_movement_disabled : bool = false
var ACCELERATION : int = 2000
var MAX_SPEED : int = 300
var path := PoolVector2Array() setget set_path
var nav_2d : Navigation2D
var current_target
var old_target
var true_if_target_reached : bool = false


func _on_spent_timeout():
    emit_signal(\"activity_ended\")
    exit_building()


func _ready():
    add_to_group(\"people\")
    # randomize the frame on which the nav is calculated
    randomize()
    path = nav_2d.get_simple_path(global_position, current_target.position_world)


func set_path(value : PoolVector2Array) -> void:
    # if the navigation path is small enough, then we don't need to move the mob
    # because we reach the player
    path = value
    if value.size() == 0:
        return
    set_process(true)


func enter_building():
    current_target.current_population += 1
    true_if_target_reached = true
    visible = false
    old_target = current_target
    node_spent.start(3)
    velocity = Vector2.ZERO
    node_safe.stop()
    
    
func exit_building():
    old_target.current_population -= 1
    if data.food_current <= 0:
        data.pop_current += 1
        queue_free()
        return
    path = nav_2d.get_simple_path(global_position, current_target.position_world)
    true_if_target_reached = false
    visible = true
    
    # just in case the guys got stuck somewhere
    node_safe.start()


func _physics_process(delta : float) -> void:
    if !true_if_target_reached:
        move_along_path(MAX_SPEED * delta, delta)

    if global_position.distance_to(current_target.position_world) < 66 and !true_if_target_reached:
        enter_building()


func move_along_path(distance : float, delta : float) -> void:
    if path.size() == 0:
        set_process(false)
        return
    if distance <= 0:
        return
    var distance_to_next_point : = position.distance_to(path[0])
    if distance_to_next_point > 0:
        var special_vect = (path[0] - global_position).normalized()
        velocity = velocity.move_toward(special_vect * MAX_SPEED, ACCELERATION * delta)
        if !true_if_movement_disabled:
            velocity = move_and_slide(velocity)
    if distance >= distance_to_next_point:
        path.remove(0)
        move_along_path(distance - distance_to_next_point, delta)


func _on_safe_timeout():
    data.pop_current += 1
    queue_free()
"

[sub_resource type="CircleShape2D" id=2]
radius = 1.60646

[node name="people1" type="KinematicBody2D"]
collision_layer = 0
script = SubResource( 1 )

[node name="Sprite" type="Sprite" parent="."]
position = Vector2( 0.853546, -22.1789 )
texture = ExtResource( 1 )

[node name="spent" type="Timer" parent="."]
wait_time = 4.0

[node name="CollisionShape2D" type="CollisionShape2D" parent="."]
shape = SubResource( 2 )

[node name="safe" type="Timer" parent="."]
wait_time = 8.0
one_shot = true
[connection signal="timeout" from="spent" to="." method="_on_spent_timeout"]
[connection signal="timeout" from="safe" to="." method="_on_safe_timeout"]
